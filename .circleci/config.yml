version: 2

parameters:
  base-tag:
    type: string
    default: "latest"

jobs:
  setup:
    machine: true
    steps:
      - checkout
      - run:
          name: Make sure base is up to date and remote
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            BASE_TAG="$(md5sum Pipfile.lock | cut -c1-6)$(md5sum Dockerfile-installed | cut -c1-6)"
            TAG=${CIRCLE_BRANCH}
            if (curl --silent -f -lSL https://index.docker.io/v1/repositories/unicef/datamart/tags/$BASE_TAG > /dev/null); then
              echo "Up to date!"
            else
              docker build -t unicef/datamart:$BASE_TAG -f Dockerfile-installed .
              docker push unicef/datamart:$BASE_TAG
              docker build --build-arg BASE_TAG=$BASE_TAG -t unicef/datamart:$TAG .
              echo "Current directory: $(pwd)"
              echo "Files in current directory: $(ls -l)"
              VERSION=$(grep 'VERSION =' src/etools_datamart/__init__.py | awk '{print $5}')
              VERSION=${VERSION//\"}
              echo "VERSION value is $VERSION"
              docker tag unicef/datamart:$TAG unicef/datamart:"tag-$VERSION"
              docker push unicef/datamart:"tag-$VERSION"
              if (echo "develop" | grep -q "$CIRCLE_BRANCH"); then
                docker tag unicef/datamart:$BASE_TAG unicef/datamart:latest
                docker push unicef/datamart:latest
              elif (echo "master" | grep -q "$CIRCLE_BRANCH"); then
                docker tag unicef/datamart:$BASE_TAG unicef/datamart:latest_prod
                docker push unicef/datamart:latest_prod
              else
                echo "Not a followed branch not pushing latest"
              fi
            fi
      - run:
          name: Triggering test workflow
          command: |
            BASE_TAG="$(md5sum Pipfile.lock | cut -c1-6)$(md5sum Dockerfile-installed | cut -c1-6)"
            curl --user ${CIRCLE_TOKEN}: \
                --data build_parameters[CIRCLE_JOB]=test \
                --data build_parameters[BASE_TAG]=$BASE_TAG \
                --data revision=$CIRCLE_SHA1 \
                https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
  test:
    working_directory: ~/code
    docker:
      - image: unicef/datamart:$BASE_TAG
        environment:
          PGHOST: 127.0.0.1
          PIPENV_VENV_IN_PROJECT: 1
          DATABASE_URL: "postgis://postgres:postgres@127.0.0.1:5432/etools_datamart"
          DATABASE_URL_ETOOLS: "postgis://postgres:postgres@127.0.0.1:5432/etools"
          CELERY_BROKER_URL: "redis://localhost:6379/0"
          CELERY_RESULT_BACKEND: "redis://localhost:6379/0"
          DEPLOY_BRANCHES: "develop|staging|master"
      - image: cimg/redis:6.2
      - image: cimg/postgres:12.9-postgis
        environment:
          POSTGRES_USER: postgres
          PGUSER: postgres
          POSTGRES_DB: etools_datamart
          POSTGRES_PASSWORD: postgres
    steps:
      - checkout
      - restore_cache:
          key: source-{{ .Branch }}--{{ checksum "Pipfile.lock" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: run tests
          no_output_timeout: 30m
          command: |
            export PATH=/home/circleci/.local/bin:$PATH
            export PYTHONHASHSEED=${RANDOM}
            pip install tox
            tox
      - save_cache:
          key: source-{{ .Branch }}--{{ checksum "Pipfile.lock" }}-{{ checksum ".circleci/config.yml" }}
          paths:
            - ".venv"
            - "~/.cache/pip"
      - store_artifacts:
          path: build/coverage
          destination: coverage
      - run:
          name: Triggering build_and_deploy job
          command: |
            if (echo "$DEPLOY_BRANCHES" | grep -q "$CIRCLE_BRANCH"); then
              curl --user ${CIRCLE_TOKEN}: \
                --data build_parameters[CIRCLE_JOB]=build_and_upload \
                --data revision=$CIRCLE_SHA1 \
                https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
            else
              echo "not triggered - '$CIRCLE_BRANCH' is not a deployable branch: '$DEPLOY_BRANCHES'"
            fi

  build_and_upload:
    machine: true
    steps:
      - checkout
      - run:
          name: Building the image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            BASE_TAG="$(md5sum Pipfile.lock | cut -c1-6)$(md5sum Dockerfile-installed | cut -c1-6)"
            TAG=${CIRCLE_BRANCH}
            (docker pull unicef/datamart:$BASE_TAG) ||
            (docker build -t unicef/datamart:$BASE_TAG -f Dockerfile-installed . && docker push unicef/datamart:$BASE_TAG)
            docker build --build-arg BASE_TAG=$BASE_TAG -t unicef/datamart:$TAG .
      - run:
          name: Pushing to Docker Hub
          command: |
            echo "Current directory: $(pwd)"
            echo "Files in current directory: $(ls -l)"
            VERSION=$(grep 'VERSION =' src/etools_datamart/__init__.py | awk '{print $5}')
            VERSION=${VERSION//\"}
            echo "VERSION value is $VERSION"
            TAG=${CIRCLE_BRANCH}
            BASE_TAG="$(md5sum Pipfile.lock | cut -c1-6)$(md5sum Dockerfile-installed | cut -c1-6)"
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            echo "TAG value is $TAG"
            docker push unicef/datamart:$TAG
            docker tag unicef/datamart:$TAG unicef/datamart:"tag-$VERSION"
            docker push unicef/datamart:"tag-$VERSION"
            docker tag unicef/datamart:$BASE_TAG unicef/datamart:"base_tag-$VERSION"
            docker push unicef/datamart:"base_tag-$VERSION"
            if (echo "develop" | grep -q "$CIRCLE_BRANCH"); then
              docker tag unicef/datamart:$TAG unicef/datamart:"dev-$VERSION"
              docker push unicef/datamart:"dev-$VERSION"
              docker tag unicef/datamart:$TAG unicef/datamart:dev-latest
              docker push unicef/datamart:dev-latest
              docker tag unicef/datamart:$BASE_TAG unicef/datamart:base-dev-latest
              docker push unicef/datamart:base-dev-latest
            elif (echo "master" | grep -q "$CIRCLE_BRANCH"); then
              docker tag unicef/datamart:$TAG unicef/datamart:"prod-$VERSION"
              docker push unicef/datamart:"prod-$VERSION"
              docker tag unicef/datamart:$TAG unicef/datamart:latest_prod
              docker push unicef/datamart:latest_prod
              docker tag unicef/datamart:$BASE_TAG unicef/datamart:base-prod-latest
              docker push unicef/datamart:base-prod-latest
            else
              echo "Not a followed branch not pushing latest"
            fi

workflows:
  version: 2
  all:
    jobs:
      - setup
